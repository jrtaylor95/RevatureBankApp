DROP TABLE CUSTOMER_ACCOUNT;
DROP TABLE CUSTOMER;
DROP TABLE ACCOUNT;
DROP TABLE EMPLOYEE;
/
CREATE TABLE CUSTOMER (
    C_ID INT PRIMARY KEY,
    C_USER_NAME VARCHAR(50) UNIQUE NOT NULL,
    C_FIRST_NAME VARCHAR(50) NOT NULL,
    C_LAST_NAME VARCHAR(50) NOT NULL,
    C_PASSWORD VARCHAR(255) NOT NULL,
    C_IS_ACTIVE SMALLINT DEFAULT 1 CHECK (C_IS_ACTIVE BETWEEN 0 AND 1) NOT NULL
);
/
DROP SEQUENCE SQ_C_ID;
CREATE SEQUENCE SQ_C_ID MINVALUE 1 INCREMENT BY 1 START WITH 1;
/
CREATE OR REPLACE TRIGGER TRIG_C_ID
BEFORE INSERT ON CUSTOMER
FOR EACH ROW
BEGIN
    :NEW.C_ID := SQ_C_ID.NEXTVAL;
END;
/
CREATE TABLE ACCOUNT (
    A_ID INT PRIMARY KEY,
    A_NICKNAME VARCHAR(50) NOT NULL,
    A_BALANCE BINARY_DOUBLE DEFAULT 0 NOT NULL,
    A_IS_PENDING SMALLINT DEFAULT 1 CHECK (A_IS_PENDING BETWEEN 0 AND 1) NOT NULL,
    A_IS_ACTIVE SMALLINT DEFAULT 1 CHECK (A_IS_ACTIVE BETWEEN 0 AND 1) NOT NULL
);
/
DROP SEQUENCE SQ_A_ID;
CREATE SEQUENCE SQ_A_ID MINVALUE 1 INCREMENT BY 1 START WITH 1;
/
CREATE OR REPLACE TRIGGER TRIG_A_ID
BEFORE INSERT ON ACCOUNT
FOR EACH ROW
BEGIN
    :NEW.A_ID := SQ_A_ID.NEXTVAL;
END;
/
CREATE TABLE CUSTOMER_ACCOUNT (
    A_ID INT,
    C_ID INT,
    CONSTRAINT FK_A_ID 
    FOREIGN KEY (A_ID)
    REFERENCES ACCOUNT (A_ID),
    CONSTRAINT FK_C_ID 
    FOREIGN KEY (C_ID)
    REFERENCES CUSTOMER (C_ID)
);
/
CREATE OR REPLACE TRIGGER TRIG_C_DELETE
BEFORE DELETE ON CUSTOMER
FOR EACH ROW
BEGIN
    DELETE FROM CUSTOMER_ACCOUNT
    WHERE CUSTOMER_ACCOUNT.C_ID = :OLD.C_ID;
END;
/
CREATE OR REPLACE TRIGGER TRIG_A_DELETE
BEFORE DELETE ON ACCOUNT
FOR EACH ROW
BEGIN
    DELETE FROM CUSTOMER_ACCOUNT
    WHERE CUSTOMER_ACCOUNT.A_ID = :OLD.A_ID;
END;
/
CREATE TABLE EMPLOYEE (
    E_ID INT PRIMARY KEY,
    E_USER_NAME VARCHAR(50) UNIQUE NOT NULL,
    E_FIRST_NAME VARCHAR(50) NOT NULL,
    E_LAST_NAME VARCHAR(50) NOT NULL,
    E_PASSWORD VARCHAR(255) NOT NULL,
    E_IS_ADMIN SMALLINT DEFAULT 0 CHECK (E_IS_ADMIN BETWEEN 0 AND 1) NOT NULL,
    E_IS_ACTIVE SMALLINT DEFAULT 1 CHECK (E_IS_ACTIVE BETWEEN 0 AND 1) NOT NULL
);
/
DROP SEQUENCE SQ_E_ID;
CREATE SEQUENCE SQ_E_ID MINVALUE 1 INCREMENT BY 1 START WITH 1;
/
CREATE OR REPLACE TRIGGER TRIG_E_ID
BEFORE INSERT ON EMPLOYEE
FOR EACH ROW
BEGIN
    :NEW.E_ID := SQ_E_ID.NEXTVAL;
END;
/
CREATE OR REPLACE VIEW PENDING_ACCOUNT AS
    SELECT CUSTOMER.C_ID, CUSTOMER.C_USER_NAME, ACCOUNT.A_ID, ACCOUNT.A_NICKNAME, ACCOUNT.A_BALANCE
    FROM CUSTOMER_ACCOUNT
    JOIN CUSTOMER ON CUSTOMER_ACCOUNT.C_ID = CUSTOMER.C_ID
    JOIN ACCOUNT ON CUSTOMER_ACCOUNT.A_ID = ACCOUNT.A_ID
    WHERE ACCOUNT.A_IS_PENDING = 1;
    
    
    
/   
CREATE OR REPLACE VIEW CUSTOMER_ACCOUNT_VIEW AS
    SELECT CUSTOMER.C_ID, CUSTOMER.C_USER_NAME, ACCOUNT.A_ID, ACCOUNT.A_NICKNAME, ACCOUNT.A_BALANCE
    FROM CUSTOMER_ACCOUNT
    JOIN CUSTOMER ON CUSTOMER_ACCOUNT.C_ID = CUSTOMER.C_ID
    JOIN ACCOUNT ON CUSTOMER_ACCOUNT.A_ID = ACCOUNT.A_ID
    WHERE ACCOUNT.A_IS_ACTIVE = 1 AND ACCOUNT.A_IS_PENDING = 0 AND CUSTOMER.C_IS_ACTIVE = 1;
/   
CREATE OR REPLACE VIEW ACTIVE_ACCOUNT AS
    SELECT *
    FROM ACCOUNT
    WHERE ACCOUNT.A_IS_ACTIVE = 1;
/   
CREATE OR REPLACE VIEW ACTIVE_CUSTOMER AS
    SELECT *
    FROM CUSTOMER
    WHERE CUSTOMER.C_IS_ACTIVE = 1;
/  
CREATE OR REPLACE VIEW ACTIVE_EMPLOYEE AS
    SELECT *
    FROM EMPLOYEE
    WHERE EMPLOYEE.E_IS_ACTIVE = 1;
/   
CREATE OR REPLACE VIEW ADMINISTRATOR AS
    SELECT *
    FROM EMPLOYEE
    WHERE EMPLOYEE.E_IS_ADMIN = 1;
/  
CREATE OR REPLACE VIEW USER_LOGON AS
    SELECT CUSTOMER.C_USER_NAME AS USER_NAME, CUSTOMER.C_PASSWORD AS PASSWORD
    FROM CUSTOMER
    WHERE CUSTOMER.C_IS_ACTIVE = 1
    UNION
    SELECT EMPLOYEE.E_USER_NAME AS USER_NAME, EMPLOYEE.E_PASSWORD AS PASSWORD
    FROM EMPLOYEE
    WHERE EMPLOYEE.E_IS_ACTIVE = 1;
/
CREATE OR REPLACE PROCEDURE APPROVE_ACCOUNT (
    ACCOUNT_ID IN ACCOUNT.A_IS_ACTIVE%type
) AS
BEGIN
        UPDATE ACCOUNT
        SET ACCOUNT.A_IS_PENDING = 0
        WHERE ACCOUNT.A_ID = Account_ID;
        COMMIT;
END;
/
create or replace procedure toggle_account_active (
    Account_id in ACCOUNT.A_IS_ACTIVE%type
) as
BEGIN
    DECLARE
    Active_VALUE account.A_is_active%TYPE;
    BEGIN
        SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
        SELECT Account.A_is_active INTO active_VALUE
        FROM account
        WHERE account.A_id = a_id;

        IF (active_VALUE = 0) THEN
            active_VALUE := 1;
        ELSE
            active_VALUE := 0;
        END IF;

        UPDATE account
        SET account.a_is_active = active_VALUE
        WHERE account.a_id = account_id;
        COMMIT;
    END;
END;
/
create or replace procedure toggle_CUSTOMER_active (
    CUSTOMER_ID in CUSTOMER.C_IS_ACTIVE%type
) as
BEGIN
    DECLARE
    Active_VALUE CUSTOMER.C_is_active%TYPE;
    BEGIN
        SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
        SELECT CUSTOMER.C_is_active INTO active_VALUE
        FROM CUSTOMER
        WHERE CUSTOMER.C_id = CUSTOMER_id;

        IF (active_VALUE = 0) THEN
            active_VALUE := 1;
        ELSE
            active_VALUE := 0;
        END IF;

        UPDATE CUSTOMER
        SET CUSTOMER.C_is_active = active_VALUE
        WHERE CUSTOMER.C_id = CUSTOMER_ID;
        COMMIT;
    END;
END;
/
create or replace procedure toggle_EMPLOYEE_active (
    EMPLOYEE_ID in EMPLOYEE.E_IS_ACTIVE%type
) as
BEGIN
    DECLARE
    Active_VALUE EMPLOYEE.E_is_active%TYPE;
    BEGIN
        SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
        SELECT EMPLOYEE.E_is_active INTO active_VALUE
        FROM EMPLOYEE
        WHERE EMPLOYEE.E_id = EMPLOYEE_ID;

        IF (active_VALUE = 0) THEN
            active_VALUE := 1;
        ELSE
            active_VALUE := 0;
        END IF;

        UPDATE EMPLOYEE
        SET EMPLOYEE.E_is_active = active_VALUE
        WHERE EMPLOYEE.E_id = EMPLOYEE_ID;
        COMMIT;
    END;
END;

create or replace PROCEDURE CREATE_ACCOUNT (
    NICKNAME IN ACCOUNT.A_NICKNAME%TYPE,
    C_USER_NAME IN CUSTOMER.C_USER_NAME%TYPE
) AS
BEGIN
    DECLARE
    ACCOUNT_ID ACCOUNT.A_ID%TYPE;
    CUSTOMER_ID CUSTOMER.C_ID%TYPE;
    BEGIN
        --WE WANT TO MAKE SURE THIS TRANSACTION WON'T BE ALTERED BY ANY CONCURRENT ACCOUNT CREATIONS
        SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
        SELECT CUSTOMER.C_ID INTO CUSTOMER_ID
        FROM CUSTOMER
        WHERE CUSTOMER.C_USER_NAME = C_USER_NAME;
        
        INSERT INTO ACCOUNT (A_NICKNAME) VALUES (NICKNAME);
        
        SELECT MAX(ACCOUNT.A_ID) INTO ACCOUNT_ID
        FROM ACCOUNT;
        
        INSERT INTO CUSTOMER_ACCOUNT VALUES (ACCOUNT_ID, CUSTOMER_ID);
        COMMIT;
    END;
END;
/
DROP TABLE TRANSACTION_LOG;
DROP TABLE TRANSACTION_TYPE;
CREATE TABLE TRANSACTION_TYPE (
    T_TYPE_ID INT, 
	T_TYPE_NAME VARCHAR(10)
);
/
CREATE TABLE TRANSACTION_LOG (
    T_ID INT PRIMARY KEY,
    T_TIME DATE DEFAULT localtimestamp, 
	T_TYPE_ID INT, 
	FROM_CUSTOMER_ID INT, 
	FROM_BANK_ACCOUNT_ID INT, 
	TO_CUSTOMER_ID INT, 
	TO_BANK_ACCOUNT_ID INT, 
	AMOUNT BINARY_DOUBLE 
);
/